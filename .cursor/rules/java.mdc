---
description: 该规则解释了 Java 的约定和最佳实践。
globs: **/*.java
alwaysApply: false
---
# Java 语言规范

## Java 8+ 特性使用
- **Lambda 表达式**：用于函数式编程和流处理
  ```java
  List<String> activeUsers = users.stream()
      .filter(user -> user.isActive())
      .map(User::getName)
      .collect(Collectors.toList());
  ```

- **Stream API**：充分利用 Stream API 进行集合处理
  ```java
  public <T extends ExtAbility> T select(List<T> candidates) {
      return candidates.stream()
          .filter(ext -> code.equals(ext.getCode()))
          .findFirst()
          .orElse(null);
  }
  ```

- **Optional**：避免空指针异常
  ```java
  public String getOrderStatus(String orderId) {
      return Optional.ofNullable(orderId)
          .map(id -> "已支付")
          .orElse("未知状态");
  }
  ```

- **方法引用**：简化代码
  ```java
  List<String> names = users.stream()
      .map(User::getName)
      .collect(Collectors.toList());
  ```

## FlexPoint 框架特定规范

### 扩展点接口设计
```java
@FpSelector("codeVersionSelector")
public interface OrderProcessAbility extends ExtAbility {
    String processOrder(String orderId, String orderData);
    String getOrderStatus(String orderId);
}
```

### 扩展点实现类
```java
@Component
public class MallOrderProcessAbility implements OrderProcessAbility {
    @Override 
    public String getCode() { 
        return "mall-app"; 
    }
    
    @Override 
    public String processOrder(String orderId, String orderData) { 
        return "商城订单处理完成"; 
    }
    
    @Override 
    public String getOrderStatus(String orderId) { 
        return "已支付"; 
    }
}
```

### 选择器实现
```java
@Component
public class CodeVersionSelector implements Selector {
    @Override
    public <T extends ExtAbility> T select(List<T> candidates) {
        String code = SysAppContext.getAppCode();
        return candidates.stream()
            .filter(ext -> code.equals(ext.getCode()))
            .findFirst()
            .orElse(null);
    }
    
    @Override
    public String getName() { 
        return "codeVersionSelector"; 
    }
}
```

### 配置类设计
```java
@Data
public class FlexPointConfig {
    private boolean enabled = true;
    private MonitorConfig monitor = new MonitorConfig();
    private RegistryConfig registry = new RegistryConfig();
    
    @Data
    public static class MonitorConfig {
        private boolean enabled = true;
        private boolean logInvocation = true;
        private boolean asyncEnabled = false;
        private int asyncQueueSize = 1000;
    }
}
```

## 命名约定
- **类名**：使用帕斯卡命名法（如 `OrderProcessAbility`、`CodeVersionSelector`）
- **方法和变量名**：使用驼峰命名法（如 `processOrder`、`getCode`）
- **常量**：使用全大写下划线分隔（如 `DEFAULT_VERSION`、`MAX_RETRY_ATTEMPTS`）
- **包名**：使用小写，按功能模块划分（如 `com.flexpoint.core.ext`）
- **扩展点接口**：以 `Ability` 结尾
- **选择器类**：以 `Selector` 结尾

## 代码风格
- **缩进**：使用4个空格，不使用Tab
- **行长度**：每行不超过120个字符
- **大括号**：使用Egyptian风格（开括号不换行）
- **空行**：方法间使用一个空行分隔，逻辑块间使用空行分隔

## 异常处理
- **自定义异常**：使用 `FlexPointConfigException` 等自定义异常
- **异常链**：保持异常链，不丢失原始异常信息
  ```java
  try {
      // 可能抛出异常的代码
  } catch (SpecificException e) {
      throw new FlexPointConfigException("配置验证失败", e);
  }
  ```

- **资源管理**：使用try-with-resources自动管理资源
  ```java
  try (var reader = Files.newBufferedReader(path)) {
      // 使用reader
  }
  ```

## 集合和流处理
- **集合选择**：根据使用场景选择合适的集合类型
  - `ArrayList`：随机访问频繁
  - `LinkedList`：插入删除频繁
  - `HashMap`：键值对存储
  - `CopyOnWriteArrayList`：线程安全的列表

- **Stream API**：充分利用Stream API进行函数式编程
  ```java
  List<String> activeUserNames = users.stream()
      .filter(User::isActive)
      .map(User::getName)
      .sorted()
      .collect(Collectors.toList());
  ```

## 并发编程
- **线程安全**：优先使用不可变对象和线程安全的集合
- **ThreadLocal**：使用 ThreadLocal 管理上下文信息
  ```java
  private static final ThreadLocal<String> APP_CODE_HOLDER = new ThreadLocal<>();
  
  public static void setAppCode(String appCode) {
      APP_CODE_HOLDER.set(appCode);
  }
  ```
- **并发集合**：使用 `CopyOnWriteArrayList` 等并发集合
- **CompletableFuture**：使用 CompletableFuture 处理异步操作

## 内存管理
- **对象创建**：避免在循环中创建不必要的对象
- **字符串处理**：大量字符串操作使用StringBuilder
- **集合大小**：预估集合大小，避免频繁扩容
- **弱引用**：适当使用WeakReference避免内存泄漏

## 泛型使用
- **类型安全**：充分利用泛型提供类型安全
- **通配符**：正确使用上界通配符（? extends）和下界通配符（? super）
- **类型擦除**：理解泛型类型擦除的限制
  ```java
  public <T extends ExtAbility> T select(List<T> candidates) {
      // 选择逻辑
  }
  ```

## 注解使用
- **标准注解**：正确使用 `@Override`、`@Deprecated`、`@SuppressWarnings` 等
- **框架注解**：使用 `@Component`、`@FpSelector`、`@FpExt` 等框架注解
- **自定义注解**：合理创建自定义注解简化代码

## 测试规范
- **单元测试**：使用JUnit 5编写单元测试
- **测试命名**：测试方法使用描述性命名（如 `shouldSelectCorrectAbilityWhenCodeMatches`）
- **Mock测试**：使用Mockito进行Mock测试
  ```java
  @Test
  void shouldSelectCorrectAbilityWhenCodeMatches() {
      // Given
      List<OrderProcessAbility> abilities = Arrays.asList(
          new MallOrderProcessAbility(),
          new LogisticsOrderProcessAbility()
      );
      
      // When
      OrderProcessAbility selected = selector.select(abilities);
      
      // Then
      assertThat(selected).isInstanceOf(MallOrderProcessAbility.class);
  }
  ```

## 性能优化
- **算法复杂度**：选择合适的算法和数据结构
- **缓存策略**：合理使用缓存减少重复计算
- **懒加载**：对于昂贵的操作使用懒加载
- **批量处理**：批量处理数据库操作和网络请求

## 代码质量
- **单一职责**：每个类和方法只负责一个功能
- **开闭原则**：对扩展开放，对修改关闭
- **依赖倒置**：依赖抽象而不是具体实现
- **接口隔离**：使用小而专一的接口
- **代码复用**：提取公共逻辑，避免重复代码

## 文档和注释
- **JavaDoc**：为公共API编写完整的JavaDoc
- **代码注释**：为复杂逻辑添加解释性注释
- **TODO标记**：使用TODO标记待完成的工作
  ```java
  /**
   * 处理订单
   *
   * @param orderId 订单ID
   * @param orderData 订单数据
   * @return 处理结果
   * @throws OrderProcessException 当订单处理失败时抛出
   */
  public String processOrder(String orderId, String orderData) {
      // TODO: 实现订单处理逻辑
      return "处理完成";
  }
  ```

## FlexPoint 特定最佳实践
- **扩展点注册**：使用 `flexPoint.register(ability)` 注册扩展点
- **扩展点查找**：使用 `flexPoint.findAbility(AbilityClass.class)` 查找扩展点
- **选择器注册**：通过 `@Component` 注解或手动调用 `flexPoint.registerSelector(selector)` 注册
- **监控使用**：通过 `ExtMonitor` 获取扩展点调用统计
- **配置验证**：使用 `FlexPointConfigValidator` 验证配置