---
description: 描述了项目通用规范
globs:
alwaysApply: true
---
# 项目通用规范

## 技术栈
- **语言**: Java 8+
- **构建工具**: Maven
- **框架**: Spring Boot 2.7.18
- **日志**: SLF4J 2.0.9
- **工具库**: Lombok 1.18.30, Hutool 5.8.35, Guava 33.4.0-jre, MapStruct 1.6.3
- **测试**: JUnit 5.10.0, Mockito-inline 5.2.0
- **依赖管理**: flexpoint-dependencies-bom (BOM统一管理)

## FlexPoint 框架核心原则
- **扩展点优先**：优先使用扩展点模式解决业务问题
- **选择器驱动**：通过选择器实现动态路由和策略切换
- **监控可观测**：所有扩展点调用都要有监控和统计
- **配置驱动**：通过配置控制框架行为，避免硬编码
- **线程安全**：使用 ThreadLocal 管理上下文，避免共享状态
- **异步处理**：监控和告警使用异步处理，不影响业务性能

## 项目结构规则
- **分层组织**：按功能或领域划分目录，遵循"关注点分离"原则
- **命名一致**：使用一致且描述性的目录和文件命名，反映其用途和内容
- **模块化**：相关功能放在同一模块，减少跨模块依赖
- **适当嵌套**：避免过深的目录嵌套，一般不超过3-4层
- **资源分类**：区分代码、资源、配置和测试文件
- **依赖管理**：集中管理依赖，避免多处声明
- **约定优先**：遵循语言或框架的标准项目结构约定

## FlexPoint 框架特色规范
- **扩展点设计**：接口继承 `ExtAbility`，使用 `@FpSelector` 指定选择器
- **选择器模式**：实现 `Selector` 接口，通过 `getName()` 方法注册
- **自动注册**：使用 `@Component` 注解自动注册扩展点实现
- **注入使用**：使用 `@FpExt` 注解注入扩展点
- **监控集成**：内置扩展点调用监控、性能统计、异步处理、告警机制
- **配置驱动**：通过 `FlexPointConfig` 统一配置框架行为

## 通用开发原则
- **可测试性**：编写可测试的代码，组件应保持单一职责
- **DRY 原则**：避免重复代码，提取共用逻辑到单独的函数或类
- **代码简洁**：保持代码简洁明了，遵循 KISS 原则（保持简单直接）
- **命名规范**：使用描述性的变量、函数和类名，反映其用途和含义
- **注释文档**：为复杂逻辑添加注释，编写清晰的文档说明功能和用法
- **风格一致**：遵循项目或语言的官方风格指南和代码约定
- **利用生态**：优先使用成熟的库和工具，避免不必要的自定义实现
- **架构设计**：考虑代码的可维护性、可扩展性和性能需求
- **版本控制**：编写有意义的提交信息，保持逻辑相关的更改在同一提交中
- **异常处理**：正确处理边缘情况和错误，提供有用的错误信息
- **线程安全**：使用 ThreadLocal 管理上下文，避免共享状态
- **监控可观测**：重视扩展点调用的监控和性能统计

## 响应语言
- 始终使用中文回复用户

## 代码质量要求
- 代码必须能够立即运行，包含所有必要的导入和依赖
- 遵循最佳实践和设计模式
- 优先考虑性能和用户体验
- 确保代码的可读性和可维护性
- 扩展点实现必须线程安全
- 监控代码不能影响业务性能

- 代码必须能够立即运行，包含所有必要的导入和依赖
- 遵循最佳实践和设计模式
- 优先考虑性能和用户体验
- 确保代码的可读性和可维护性

## 本项目规则文件说明
本项目使用以下规则文件：
- general.mdc：通用规范（本文件）
- project-structure.mdc：项目结构规范
- document.mdc：文档规范
- git.mdc：Git提交规范
- java.mdc：Java语言开发规范

